// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProject.Models;

#nullable disable

namespace WebProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250320175911_AddNewFeatures")]
    partial class AddNewFeatures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebProject.Models.Entities.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"));

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.HasKey("ClassID");

                    b.HasIndex("ClassCode")
                        .IsUnique();

                    b.HasIndex("DepartmentID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CourseID");

                    b.HasIndex("CourseCode")
                        .IsUnique();

                    b.HasIndex("DepartmentID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentCode")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WebProject.Models.Entities.ExternalAuthentication", b =>
                {
                    b.Property<int>("ExternalAuthID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalAuthID"));

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderUserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ExternalAuthID");

                    b.HasIndex("UserID");

                    b.HasIndex("Provider", "ProviderUserID")
                        .IsUnique();

                    b.ToTable("ExternalAuthentications");
                });

            modelBuilder.Entity("WebProject.Models.Entities.FeeCategory", b =>
                {
                    b.Property<int>("FeeCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("FeeCategoryID");

                    b.ToTable("FeeCategories");
                });

            modelBuilder.Entity("WebProject.Models.Entities.FeeStructure", b =>
                {
                    b.Property<int>("FeeStructureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeStructureID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("FeeCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PerCredit")
                        .HasColumnType("bit");

                    b.Property<int>("SemesterID")
                        .HasColumnType("int");

                    b.HasKey("FeeStructureID");

                    b.HasIndex("FeeCategoryID");

                    b.HasIndex("SemesterID");

                    b.HasIndex("DepartmentID", "SemesterID", "FeeCategoryID")
                        .IsUnique();

                    b.ToTable("FeeStructures");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoicePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<bool>("SentToEmail")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceID");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("PaymentID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WebProject.Models.Entities.LoginHistory", b =>
                {
                    b.Property<int>("LoginHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginHistoryID"));

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LoginHistoryID");

                    b.HasIndex("UserID");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentFeeID")
                        .HasColumnType("int");

                    b.Property<string>("TransactionID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("StudentFeeID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WebProject.Models.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Semester", b =>
                {
                    b.Property<int>("SemesterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SemesterID"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterID");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentSemester")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("int");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StudentID");

                    b.HasIndex("ClassID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("StudentCode")
                        .IsUnique();

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentCourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentCourseID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("StudentCourseID");

                    b.HasIndex("CourseID");

                    b.HasIndex("SemesterID");

                    b.HasIndex("StudentID", "CourseID", "SemesterID")
                        .IsUnique();

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentFee", b =>
                {
                    b.Property<int>("StudentFeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentFeeID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentFeeID");

                    b.HasIndex("SemesterID");

                    b.HasIndex("StudentID", "SemesterID")
                        .IsUnique();

                    b.ToTable("StudentFees");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentFeeDetail", b =>
                {
                    b.Property<int>("StudentFeeDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentFeeDetailID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeeCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("StudentFeeID")
                        .HasColumnType("int");

                    b.HasKey("StudentFeeDetailID");

                    b.HasIndex("FeeCategoryID");

                    b.HasIndex("StudentFeeID");

                    b.ToTable("StudentFeeDetails");
                });

            modelBuilder.Entity("WebProject.Models.Entities.SystemSetting", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingID");

                    b.HasIndex("SettingName")
                        .IsUnique();

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("WebProject.Models.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Class", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Department", "Department")
                        .WithMany("Classes")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Course", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WebProject.Models.Entities.ExternalAuthentication", b =>
                {
                    b.HasOne("WebProject.Models.Entities.User", "User")
                        .WithMany("ExternalAuthentications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Models.Entities.FeeStructure", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Department", "Department")
                        .WithMany("FeeStructures")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.FeeCategory", "FeeCategory")
                        .WithMany("FeeStructures")
                        .HasForeignKey("FeeCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.Semester", "Semester")
                        .WithMany("FeeStructures")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("FeeCategory");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Invoice", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Payment", "Payment")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("WebProject.Models.Entities.LoginHistory", b =>
                {
                    b.HasOne("WebProject.Models.Entities.User", "User")
                        .WithMany("LoginHistories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Notification", b =>
                {
                    b.HasOne("WebProject.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Payment", b =>
                {
                    b.HasOne("WebProject.Models.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.StudentFee", "StudentFee")
                        .WithMany("Payments")
                        .HasForeignKey("StudentFeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("StudentFee");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Student", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("WebProject.Models.Entities.Student", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentCourse", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.Semester", "Semester")
                        .WithMany("StudentCourses")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentFee", b =>
                {
                    b.HasOne("WebProject.Models.Entities.Semester", "Semester")
                        .WithMany("StudentFees")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.Student", "Student")
                        .WithMany("StudentFees")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentFeeDetail", b =>
                {
                    b.HasOne("WebProject.Models.Entities.FeeCategory", "FeeCategory")
                        .WithMany("StudentFeeDetails")
                        .HasForeignKey("FeeCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Models.Entities.StudentFee", "StudentFee")
                        .WithMany("StudentFeeDetails")
                        .HasForeignKey("StudentFeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeeCategory");

                    b.Navigation("StudentFee");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Department", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");

                    b.Navigation("FeeStructures");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebProject.Models.Entities.FeeCategory", b =>
                {
                    b.Navigation("FeeStructures");

                    b.Navigation("StudentFeeDetails");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Payment", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("WebProject.Models.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Semester", b =>
                {
                    b.Navigation("FeeStructures");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentFees");
                });

            modelBuilder.Entity("WebProject.Models.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("StudentFees");
                });

            modelBuilder.Entity("WebProject.Models.Entities.StudentFee", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("StudentFeeDetails");
                });

            modelBuilder.Entity("WebProject.Models.Entities.User", b =>
                {
                    b.Navigation("ExternalAuthentications");

                    b.Navigation("LoginHistories");

                    b.Navigation("Notifications");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
